{"version":3,"file":"suss.css","sources":["suss.scss","common/_colors.scss","common/_util_responsive.scss","common/_base.scss","suss/_mod_cindy.scss","suss/_mod_ui.scss"],"sourcesContent":["@import \"common/colors\";\n\n@import \"common/util_responsive\";\n\n@import \"common/base\";\n\n@import \"suss/mod_cindy\";\n@import \"suss/mod_ui\";","$color-pink: #e7728c;\n$color-red-dark: #89241c;","// Grid breakpoints\n//\n// Define the minimum dimensions at which your layout will change,\n// adapting to different screen sizes, for use in media queries.\n\n\n$grid-breakpoints: (\n    xs: 0,\n    sm: 576px,\n    md: 768px,\n    lg: 992px,\n    xl: 1200px\n) !default;\n\n// Grid containers\n//\n// Define the maximum width of `.container` for different screen sizes.\n\n$container-max-widths: (\n    sm: 540px,\n    md: 720px,\n    lg: 960px,\n    xl: 1140px\n) !default;\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","body {\n  background-color: $color-pink;\n}\n","html, body {\n  padding: 0;\n  margin: 0;\n}",".input-field-wrapper {\n  text-align: center;\n  margin: 0 0 3em;\n}\n\n#input-field {\n  margin: 0 auto;\n  color: $color-red-dark;\n  border-color: $color-red-dark;\n  border: 1px dashed;\n  padding: 0.3em;\n  font-size: 24px;\n\n  &.mq-focused {\n    box-shadow: none;\n    border-color: white;\n  }\n}\n\n#inp {\n  display: block;\n  background-color: transparent;\n  border: none;\n  margin: 0 auto;\n  font-size: 24px;\n  color: $color-red-dark;\n  border-bottom: 1px solid $color-red-dark;\n  padding-bottom: 5px;\n  text-align: center;\n\n  &:focus {\n    outline: none;\n    border-color: #ffffff;\n  }\n}\n\n#redraw-button {\n  display: inline-block;\n  line-height: 2.3em;\n  font-size: 20px;\n  margin: 0;\n  vertical-align: middle;\n  margin-left: 0.3em;\n  font-family: \"Times New Roman\", \"New York\", serif;\n  background-color: rgba(255, 255, 255, 0.3);\n  border: 1px solid $color-red-dark;\n  color: $color-red-dark;\n  padding: 0 0.8em;\n}"],"mappings":"AGAA,AAAA,IAAI,CAAC;EACH,gBAAgB,EFDL,OAAO,GEEnB;;ACFD,AAAA,IAAI,EAAE,AAAA,IAAI,CAAC;EACT,OAAO,EAAE,CAAE;EACX,MAAM,EAAE,CAAE,GACX;;ACHD,AAAA,oBAAoB,CAAC;EACnB,UAAU,EAAE,MAAO;EACnB,MAAM,EAAE,OAAQ,GACjB;;AAED,AAAA,YAAY,CAAC;EACX,MAAM,EAAE,MAAO;EACf,KAAK,EJNU,OAAO;EIOtB,YAAY,EJPG,OAAO;EIQtB,MAAM,EAAE,UAAW;EACnB,OAAO,EAAE,KAAM;EACf,SAAS,EAAE,IAAK,GAMjB;EAZD,AAAA,YAAY,AAQT,WAAW,CAAC;IACX,UAAU,EAAE,IAAK;IACjB,YAAY,EAAE,KAAM,GACrB;;AAGH,AAAA,IAAI,CAAC;EACH,OAAO,EAAE,KAAM;EACf,gBAAgB,EAAE,WAAY;EAC9B,MAAM,EAAE,IAAK;EACb,MAAM,EAAE,MAAO;EACf,SAAS,EAAE,IAAK;EAChB,KAAK,EJxBU,OAAO;EIyBtB,aAAa,EAAE,GAAG,CAAC,KAAK,CJzBT,OAAO;EI0BtB,cAAc,EAAE,GAAI;EACpB,UAAU,EAAE,MAAO,GAMpB;EAfD,AAAA,IAAI,AAWD,MAAM,CAAC;IACN,OAAO,EAAE,IAAK;IACd,YAAY,EAAE,OAAQ,GACvB;;AAGH,AAAA,cAAc,CAAC;EACb,OAAO,EAAE,YAAa;EACtB,WAAW,EAAE,KAAM;EACnB,SAAS,EAAE,IAAK;EAChB,MAAM,EAAE,CAAE;EACV,cAAc,EAAE,MAAO;EACvB,WAAW,EAAE,KAAM;EACnB,WAAW,EAAE,oCAAqC;EAClD,gBAAgB,EAAE,wBAAI;EACtB,MAAM,EAAE,GAAG,CAAC,KAAK,CJ5CF,OAAO;EI6CtB,KAAK,EJ7CU,OAAO;EI8CtB,OAAO,EAAE,OAAQ,GAClB","names":[]}